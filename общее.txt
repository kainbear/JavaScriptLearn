Стрелочные функции
Поговорим немного и про стрелочный функции. Давайте рассмотрим на примере сразу как она задается:

const func = () => 3 + 4

func() // Вернет цифру 7

const funcWithArguments = (firstArg, secondArg) => firstArg + secondArg

funcWithArguments(3, 4) // Вернет цифру 7

const sumNumbers = () => {
    let a = 3
    let b = 4
    return a + b 
}

sumNumbers() // Вернет цифру 7

Как вы видите, если вы сможете записать то, что вам надо вернуть в одно выражение, синтаксис становится очень прост и лаконичен.

Советы по именованию функций:

Это должно быть лаконичное и хорошо описывающее, что делает функция, название
Обычно это глагол или название начинается с глагола, так как функция это действие

Функции высшего порядка
Давайте еще более подробно поговорим о функциях. Функции в JS - это объекты, то есть функции могут в качестве аргументов принимать функции. То есть

func a () { ... } 
func b (a) { a() }

Так вот функция b() - называется функцией высшего порядка, так как в качестве аргументов ей передали другую функцию.

Так же если бы функция a() возвращала бы функцию b(), она также была бы функцией высшего порядка. 

Итого, функция высшего порядка должна соответствовать одному из этих условий:

1) Может принимать  в качестве аргумента, другую функцию;

2) Может возвращать функцию.

В уроке про массивы вы увидите пример функций высшего порядка, так как некоторые методы массивов принимают в качестве аргументов другие функции.

доступ к object через точку(object.туткчемудоступключ
)